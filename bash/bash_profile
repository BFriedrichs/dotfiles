# set where virutal environments will live
export WORKON_HOME=$HOME/code

# ensure all new environments are isolated from the site-packages directory
export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'
# use the same directory for virtualenvs as virtualenvwrapper
export PIP_VIRTUALENV_BASE=$WORKON_HOME
# makes pip detect an active virtualenv and install to it
export PIP_RESPECT_VIRTUALENV=true
if [[ -r /usr/local/bin/virtualenvwrapper.sh ]]; then
    source /usr/local/bin/virtualenvwrapper.sh
else
    echo "WARNING: Can't find virtualenvwrapper.sh"
fi


alias o=open
alias g++=g++-6

source $(dirname $(readlink ~/.bash_profile))/bash-me/profile

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PS1="[\u@\h \W]$ "
export PATH=/usr/local/sbin:$PATH
export NODE_PATH=/usr/local/lib/node_modules
export HISTCONTROL=ignoreboth:erasedups

# === other ===

function a() {
  if [ -z "$VIRTUAL_ENV" ]; then
      echo "no active VIRTUAL ENV"
      return 1
  fi

  if [ ! -d "$VIRTUAL_ENV/src" ]; then
      mkdir "$VIRTUAL_ENV/src"
  fi
  cd "$VIRTUAL_ENV/src"
}

function undo() {
	git reset --hard HEAD~1
}

function zip() {
  if [ $# -eq 0 ]; then
    NAME=$(basename $(pwd))
    /usr/bin/zip -r $NAME . -x "*.DS_Store" &>/dev/null
    echo "Created $NAME.zip ($(calc $(echo $(wc -c < $NAME.zip) | xargs)/1000000) Mb)"
  elif [ $# -eq 1 ]; then
    NAME=$1
    /usr/bin/zip -r $1 . -x "*.DS_Store" &>/dev/null
    echo "Created $NAME.zip ($(calc $(echo $(wc -c < $NAME.zip) | xargs)/1000000) Mb)"
  else
    /usr/bin/zip $@
  fi
}
